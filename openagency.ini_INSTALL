; inifie for openagency

[setup]
; To close a service, set service_http_error
; service status - values:
;service_http_error = HTTP/1.0 404 Not Found
;service_http_error = HTTP/1.1 410 Gone
;service_http_error = HTTP/1.0 503 Service Unavailable

;version
version = 2.4

; wsdl for service
wsdl = openagency.wsdl

; in_house_domain may use ?ShowInfo and use create_sample form
;in_house_domain = .dbc.dk

; set to TRUE to expose the create_sample form
;show_samples = 1

; soapActions and their corresponding request structure
; Can be found in the wsdl but is stated here for convenience
soapAction[automation] = automationRequest
soapAction[encryption] = encryptionRequest
soapAction[endUserOrderPolicy] = endUserOrderPolicyRequest
soapAction[findLibrary] = findLibraryRequest
soapAction[getCulrProfile] = getCulrProfileRequest
soapAction[nameList] = nameListRequest
soapAction[pickupAgencyList] = pickupAgencyListRequest
soapAction[openSearchProfile] = openSearchProfileRequest
soapAction[remoteAccess] = remoteAccessRequest
soapAction[requestOrder] = requestOrderRequest
soapAction[service] = serviceRequest
;soapAction[proxyDomains] = proxyDomainsRequest
;soapAction[proxyIp] = proxyIpRequest

; validate
;validate[request] = openagency.xsd
;validate[response] = openagency.xsd

; prefixes and namespaces
default_namespace_prefix = oa
xmlns[oa] = http://oss.dbc.dk/ns/openagency

xmldir = ./xml

; logfile for verbose output
logfile = /tmp/openagency.log

; set verboselevel
;   WARNING - simple warnings
;   ERROR   - errors in response
;   FATAL   - major errors
;   STAT    - Statistical logging
;   TIMER   - timer logging
;   TRACE   - program trace
;   DEBUG   - debugging info
;   Z3959   - calls to z3950 services
;   OCI     - oracle
verbose = WARNING+ERROR+FATAL+STAT+TIMER+TRACE+DEBUG+Z3950+OCI

; format for automatic timer dump %s is the operation used
dump_timer = openAgency(%s)

agency_credentials = some_user/some_pwd@some.server.dbc.dk

; memcache - enabling this will cache result for 'cache_expire' seconds
;cache_host = localhost
;cache_port = 11211
;cache_expire = 60

[aaa]
; aaa Authentication, Access control and Accounting
;
; Creates a authentication object from aaa_ip_rights, aaa_fors_rights or aaa_credentials - in that order
;
; Rights can be set here for selected ip-addresses
; aaa_ip_rights[group-identifier][ip_list] = list of ip's
; aaa_ip_rights[group-identifier][ressource][<named ressource>] = right to <named ressource>
; aaa_ip_rights[group-identifier][ressource][<named ressource 2>] = right to <named ressource 2>
;
; Rights for service operations:
; remoteAccess: 550:
; getCulrProfile: 551
; getCulrProfile: 552: createProviderId and deleteProviderId
; all other: 500
aaa_ip_rights[dbc][ip_list] = 172.16.0.0-172.31.255.255;193.111.162.0-193.111.162.255
aaa_ip_rights[dbc][ressource]['netpunkt.dk'] = 500,550,551,552
;
; if not found in aaa_ip_rights the authentication object is created from the FORS
; either by using the WS specified by aaa_fors_rights or by OCI specified by aaa_credentials
;
; uri for a fors rights webservice - aaa_fors_rights have precedence over aaa_credentials
;aaa_fors_rights = http://forsrights.some.server/?action=forsRights&outputType=php&userIdAut=%s&groupIdAut=%s&passwordAut=%s&ipAddress=%s
;
; oci credentials for FORS server
;aaa_credentials = ora_user/ora_passwd@some.server.dk
;
; memcache server for the authentication object - use localhost in one-webserver environment
;aaa_cache_address = localhost:11211
; number of seconds to cache authentication and access rights info
;aaa_cache_seconds = 3600
;


[rest]

; REST parameters for SOAPactions
;
; use xml.path.to.par notation to solve name-conflicts
; action[thisSoapAction][foo][] = some.number
; action[thisSoapAction][bar][] = another.number
; to build
; <thisSoapAction>
;   <foo>
;     <number>nn</number>
;   </foo>
;   <bar>
;     <number>mm</number>
;   </bar>
; </thisSoapAction>
; from url: action=thisSoapAction&some.number=nn&another.number=mm
;
action[automation][] = agencyId
action[automation][] = autService
action[automation][] = materialType
action[automation][] = callback
action[automation][] = outputType

action[encryption][] = email
action[encryption][] = callback
action[encryption][] = outputType

action[endUserOrderPolicy][] = agencyId
action[endUserOrderPolicy][] = orderMaterialType
action[endUserOrderPolicy][] = ownedByAgency
action[endUserOrderPolicy][] = callback
action[endUserOrderPolicy][] = outputType

action[findLibrary][] = agencyId
action[findLibrary][] = agencyName
action[findLibrary][] = agencyAddress
action[findLibrary][] = postalCode
action[findLibrary][] = city
action[findLibrary][] = anyField
action[findLibrary][] = libraryType
action[findLibrary][] = libraryStatus
action[findLibrary][] = pickupAllowed
action[findLibrary][] = sort
action[findLibrary][] = callback
action[findLibrary][] = outputType

action[getCulrProfile][] = agencyId
action[getCulrProfile][] = profileName
action[getCulrProfile][] = requesterIp
action[getCulrProfile][] = callback
action[getCulrProfile][] = outputType

action[nameList][] = libraryType
action[nameList][] = callback
action[nameList][] = outputType

action[pickupAgencyList][] = agencyId
action[pickupAgencyList][] = agencyName
action[pickupAgencyList][] = agencyAddress
action[pickupAgencyList][] = postalCode
action[pickupAgencyList][] = city
action[pickupAgencyList][] = libraryType
action[pickupAgencyList][] = libraryStatus
action[pickupAgencyList][] = pickupAllowed
action[pickupAgencyList][] = callback
action[pickupAgencyList][] = outputType

action[openSearchProfile][] = agencyId
action[openSearchProfile][] = profile
action[openSearchProfile][] = profileVersion
action[openSearchProfile][] = callback
action[openSearchProfile][] = outputType

action[remoteAccess][] = agencyId
action[remoteAccess][] = callback
action[remoteAccess][] = outputType

action[requestOrder][] = agencyId
action[requestOrder][] = callback
action[requestOrder][] = outputType

action[service][] = agencyId
action[service][] = service
action[service][] = callback
action[service][] = outputType

;action[proxyDomains][] = agencyId
;action[proxyDomains][] = callback
;action[proxyDomains][] = outputType

;action[proxyIp][] = agencyId
;action[proxyIp][] = callback
;action[proxyIp][] = outputType


; section to dump setting online
[showinfo]
; make one or more line to display if ?ShowInfo is part of the url
; __var__ will be replace by the corresponding ini-file setting - if it exists
; __var.section__ will be replace by the corresponding ini-file setting from section [section]
; this will only work if the user from in_house_domain - see above
;showinfo[] = <pre>
;showinfo[] = version:            __version.setup__
;showinfo[] = logfile:            __logfile.setup__
;showinfo[] = verbose:            __verbose__
;showinfo[] = aaa_credentials:    __aaa_credentials__
;showinfo[] = show_samples:       __show_samples__
;showinfo[] = </pre>

[howru]
test[] = service&agencyId=710100&service=orsItemRequest
preg_match[] = responder>710100<
error[] = ERROR - Cannot find 710100 in VIP
